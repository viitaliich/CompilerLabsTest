AST & Grammar

NOTE: 
	in Python spaces, tabulation, new line, ... are tokens. Also their quantity is essential. They are not indicated in Grammar for readability.

Grammar:
	<program> 	::= { <function> }
	<function> 	::= "def" name "(" [ <id> { "," <id> } ] ")" ":" { <statement> }
	<statement> ::= "return" <exp |
					<exp> |
					"if" <exp> ":" { <statement> } [ "else" ":" { <statement> } ]
	<exp> 		::= <log_or> ["if" <exp> "else" <exp>] 
	<log_or>	::= <log_and> { "or" <log_and> }
	<log_and> 	::= <not> { "and" <not_op> }
	<not_op> 	::= "not" <exp> | <assign>
	<assign> 	::= <name> "=" <exp> | <equals> 
	<equals> 	::= <bit_or> { ("==" | "!=" | "<" | ">" | "<=" | ">=") <bit_or> }
	<bit_or> 	::= <xor> { "|" <xor> }
	<xor> 		::= <bit_and> { "^" <bit_and> }
	<bit_and> 	::= <shift> { "&" <shift> }
	<shift>		::= <add> { ("<<" | ">>") <add> }
	<add> 		::= <term> { ("+" | "-") <term> }
	<term> 		::= <factor> { ("*" | "/" | "%") <factor> }
	<factor> 	::= id "(" [ <exp> { "," <exp> } ] ")" | 
					"(" <exp> ")" | 
					<unary_op> <factor> |
					name | int | float | str

AST:
	program 		= 	Program(function list)
	function 		= 	Function(	string,			// name
									string list,	// parameters
									statement list)
	statement		= 	Return(exp) |
						Exp(exp) |
						Conditional(exp, statement list, statement list option)
	exp 			= 	Assign(string, exp) | 
						Var(string) | 
						FunCall(string, exp list) |
						UnOp(unary_operator, exp) | 
						BinOp(binary_operator, left_exp, right_exp) | 
						Constant(int, float, str) |
						CondExp(exp, exp, exp)